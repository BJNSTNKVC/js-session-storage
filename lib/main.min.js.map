{"version":3,"file":"main.min.js","sources":["../src/main.ts"],"sourcesContent":["export type SessionStorageItem = {\n    data: any,\n};\n\nexport class SessionStorage {\n    /**\n     * Set the key to the Storage object.\n     *\n     * @param { string } key String containing the name of the key you want to create.\n     * @param { * } value String containing the value of the key you want to create.\n     */\n    static set(key: string, value: any): void {\n        const item: SessionStorageItem = {\n            data: value instanceof Function ? value() : value,\n        };\n\n        sessionStorage.setItem(key, JSON.stringify(item));\n    }\n\n    /**\n     * Get the key from the Storage object.\n     *\n     * @param { string } key String containing the name of the key you want to create.\n     * @param { string | Function | null } fallback String containing the fallback value.\n     *\n     * @return { * }\n     */\n    static get(key: string, fallback: string | Function | null = null): any {\n        const storageItem: string | null = sessionStorage.getItem(key);\n\n        if (storageItem === null) {\n            return fallback instanceof Function ? fallback() : fallback ?? null;\n        }\n\n        try {\n            const item: SessionStorageItem = JSON.parse(storageItem);\n\n            return item.data ?? item;\n        } catch {\n            return storageItem;\n        }\n    }\n\n    /**\n     * Get the key from the Storage, or execute the given callback and store the result.\n     *\n     * @param { string } key String containing the name of the key you want to create.\n     * @param { Function } callback Function you want to execute.\n     *\n     * @return { any }\n     */\n    static remember(key: string, callback: Function): any {\n        const item: string | null = this.get(key);\n\n        if (item === null) {\n            this.set(key, callback);\n        }\n\n        return item ?? this.get(key);\n    }\n\n    /**\n     * Retrieves all items from the Storage object.\n     *\n     * @return { object }\n     */\n    static all(): Record<string, any> {\n        return Object.fromEntries(Object.keys(sessionStorage).map((key: string): [string, any] => [key, this.get(key)]));\n    }\n\n    /**\n     * Remove the key from the Storage object.\n     *\n     * @param { string } key String containing the name of the key you want to delete.\n     */\n    static remove(key: string): void {\n        sessionStorage.removeItem(key);\n    }\n\n    /**\n     * Clear all keys stored in a given Storage object.\n     */\n    static clear(): void {\n        sessionStorage.clear();\n    }\n\n    /**\n     * Determine if the key exists in the Storage object.\n     *\n     * @param { string } key String containing the name of the key you want to check against\n     *\n     * @return { boolean }\n     */\n    static has(key: string): boolean {\n        return !!this.get(key);\n    }\n\n    /**\n     * Determine if any of the keys exists in the Storage object.\n     *\n     * @param { string | array } keys String containing the name of the key you want to check against\n     *\n     * @return { boolean }\n     */\n    static hasAny(...keys: [string | string[]] | string[]): boolean {\n        if (keys.length === 1) {\n            if (Array.isArray(keys[0])) {\n                keys = keys[0];\n            } else {\n                keys = [keys[0]];\n            }\n        }\n\n        return keys.some((key: string): boolean => this.has(key));\n    }\n\n    /**\n     * Determine if the Storage object is empty.\n     *\n     * @return { boolean }\n     */\n    static isEmpty(): boolean {\n        return Object.keys(this.all()).length === 0;\n    }\n\n    /**\n     * Determine if the Storage object is not empty.\n     *\n     * @return { boolean }\n     */\n    static isNotEmpty(): boolean {\n        return !this.isEmpty();\n    }\n\n    /**\n     * Retrieves all keys from the Storage object.\n     *\n     * @return { array }\n     */\n    static keys(): string[] {\n        return Object.keys(sessionStorage);\n    }\n\n    /**\n     * Returns the total number of items in the Storage object.\n     *\n     * @return { number }\n     */\n    static count(): number {\n        return sessionStorage.length;\n    }\n\n    /**\n     * Dump the key from the Storage object.\n     *\n     * @param { string } key String containing the name of the key you want to dump.\n     */\n    static dump(key: string): void {\n        console.log(this.get(key));\n    }\n}\n\nif (typeof window !== 'undefined') {\n    (window as any).SessionStorage = SessionStorage;\n}\n\nif (typeof global !== 'undefined') {\n    (global as any).SessionStorage = SessionStorage;\n}"],"names":["SessionStorage","set","key","value","item","data","Function","sessionStorage","setItem","JSON","stringify","get","fallback","storageItem","getItem","parse","_a","_b","remember","callback","this","all","Object","fromEntries","keys","map","remove","removeItem","clear","has","hasAny","length","Array","isArray","some","isEmpty","isNotEmpty","count","dump","console","log","window","global"],"mappings":"2PAIaA,EAOT,UAAOC,CAAIC,EAAaC,GACpB,MAAMC,EAA2B,CAC7BC,KAAMF,aAAiBG,SAAWH,IAAUA,GAGhDI,eAAeC,QAAQN,EAAKO,KAAKC,UAAUN,IAW/C,UAAOO,CAAIT,EAAaU,EAAqC,YACzD,MAAMC,EAA6BN,eAAeO,QAAQZ,GAE1D,GAAoB,OAAhBW,EACA,OAAOD,aAAoBN,SAAWM,IAAaA,QAAAA,EAAY,KAGnE,IACI,MAAMR,EAA2BK,KAAKM,MAAMF,GAE5C,OAAgB,UAATT,EAAKC,YAAI,IAAAW,EAAAA,EAAIZ,EACtB,MAAAa,GACE,OAAOJ,GAYf,eAAOK,CAAShB,EAAaiB,GACzB,MAAMf,EAAsBgB,KAAKT,IAAIT,GAMrC,OAJa,OAATE,GACAgB,KAAKnB,IAAIC,EAAKiB,GAGXf,QAAAA,EAAQgB,KAAKT,IAAIT,GAQ5B,UAAOmB,GACH,OAAOC,OAAOC,YAAYD,OAAOE,KAAKjB,gBAAgBkB,IAAKvB,GAA+B,CAACA,EAAKkB,KAAKT,IAAIT,MAQ7G,aAAOwB,CAAOxB,GACVK,eAAeoB,WAAWzB,GAM9B,YAAO0B,GACHrB,eAAeqB,QAUnB,UAAOC,CAAI3B,GACP,QAASkB,KAAKT,IAAIT,GAUtB,aAAO4B,IAAUN,GASb,OARoB,IAAhBA,EAAKO,SAEDP,EADAQ,MAAMC,QAAQT,EAAK,IACZA,EAAK,GAEL,CAACA,EAAK,KAIdA,EAAKU,KAAMhC,GAAyBkB,KAAKS,IAAI3B,IAQxD,cAAOiC,GACH,OAA0C,IAAnCb,OAAOE,KAAKJ,KAAKC,OAAOU,OAQnC,iBAAOK,GACH,OAAQhB,KAAKe,UAQjB,WAAOX,GACH,OAAOF,OAAOE,KAAKjB,gBAQvB,YAAO8B,GACH,OAAO9B,eAAewB,OAQ1B,WAAOO,CAAKpC,GACRqC,QAAQC,IAAIpB,KAAKT,IAAIT,KAIP,oBAAXuC,SACNA,OAAezC,eAAiBA,GAGf,oBAAX0C,SACNA,OAAe1C,eAAiBA"}