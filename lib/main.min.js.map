{"version":3,"file":"main.min.js","sources":["../src/main.ts"],"sourcesContent":["type SessionStorageItem = {\n    data: any,\n};\n\nexport class SessionStorage {\n    static set(key: string, value: any): void {\n        const item: SessionStorageItem = {\n            data  : value instanceof Function ? value() : value,\n        };\n\n        sessionStorage.setItem(key, JSON.stringify(item));\n    }\n\n    /**\n     * Get the key from the Storage object.\n     *\n     * @param { string } key String containing the name of the key you want to create.\n     * @param { string | Function | null } fallback String containing the fallback value.\n     *\n     * @return { * }\n     */\n    static get(key: string, fallback: string | Function | null = null): any {\n        const storageItem: string | null = sessionStorage.getItem(key);\n\n        if (storageItem === null) {\n            return fallback instanceof Function ? fallback() : fallback ?? null;\n        }\n\n        try {\n            const item: SessionStorageItem = JSON.parse(storageItem);\n\n            return item.data ?? item;\n        } catch (error) {\n            return storageItem;\n        }\n    }\n\n    /**\n     * Get the key from the Storage, or execute the given callback and store the result.\n     *\n     * @param { string } key String containing the name of the key you want to create.\n     * @param { Function } callback Function you want to execute.\n     *\n     * @return { any }\n     */\n    static remember(key: string, callback: Function): any {\n        const item: string | null = SessionStorage.get(key);\n\n        if (item === null) {\n            SessionStorage.set(key, callback);\n        }\n\n        return item ?? SessionStorage.get(key);\n    }\n\n    /**\n     * Retrieves all items from the Storage object.\n     *\n     * @return { object }\n     */\n    static all(): object {\n        const storage: object | any = { ...sessionStorage };\n\n        for (const item in storage) {\n            storage[item] = SessionStorage.get(item);\n        }\n\n        return storage;\n    }\n\n    /**\n     * Remove the key from the Storage object.\n     *\n     * @param { string } key String containing the name of the key you want to delete.\n     */\n    static remove(key: string): void {\n        sessionStorage.removeItem(key);\n    }\n\n    /**\n     * Clear all keys stored in a given Storage object.\n     */\n    static clear(): void {\n        sessionStorage.clear();\n    }\n\n    /**\n     * Determine if the key exists in the Storage object.\n     *\n     * @param { string } key String containing the name of the key you want to check against\n     *\n     * @return { boolean }\n     */\n    static has(key: string): boolean {\n        return !!SessionStorage.get(key);\n    }\n\n    /**\n     * Determine if any of the keys exists in the Storage object.\n     *\n     * @param { string | array } keys String containing the name of the key you want to check against\n     *\n     * @return { boolean }\n     */\n    static hasAny(keys: string | string[]): boolean {\n        keys = keys instanceof Array ? keys : [...arguments];\n\n        return keys.filter((key: string) => SessionStorage.has(key)).length > 0;\n    }\n\n    /**\n     * Determine if the Storage object is empty.\n     *\n     * @return { boolean }\n     */\n    static isEmpty(): boolean {\n        return Object.keys(SessionStorage.all()).length === 0;\n    }\n\n    /**\n     * Determine if the Storage object is not empty.\n     *\n     * @return { boolean }\n     */\n    static isNotEmpty(): boolean {\n        return !SessionStorage.isEmpty();\n    }\n\n    /**\n     * Retrieves all keys from the Storage object.\n     *\n     * @return { array }\n     */\n    static keys(): string[] {\n        return Object.keys(sessionStorage);\n    }\n\n    /**\n     * Returns the total number of items in the Storage object.\n     *\n     * @return { number }\n     */\n    static count(): number {\n        return sessionStorage.length;\n    }\n\n    /**\n     * Dump the key from the Storage object.\n     *\n     * @param { string } key String containing the name of the key you want to dump.\n     */\n    static dump(key: string): void {\n        console.log(SessionStorage.get(key));\n    }\n}\n\nif (typeof window !== 'undefined') {\n    (window as any).SessionStorage = SessionStorage;\n}\n\nif (typeof global !== 'undefined') {\n    (global as any).SessionStorage = SessionStorage;\n}"],"names":["SessionStorage","set","key","value","item","data","Function","sessionStorage","setItem","JSON","stringify","get","fallback","storageItem","getItem","parse","_a","error","remember","callback","all","storage","Object","assign","remove","removeItem","clear","has","hasAny","keys","Array","arguments","filter","length","isEmpty","isNotEmpty","count","dump","console","log","window","global"],"mappings":"2PAIaA,EACT,UAAOC,CAAIC,EAAaC,GACpB,MAAMC,EAA2B,CAC7BC,KAAQF,aAAiBG,SAAWH,IAAUA,GAGlDI,eAAeC,QAAQN,EAAKO,KAAKC,UAAUN,IAW/C,UAAOO,CAAIT,EAAaU,EAAqC,YACzD,MAAMC,EAA6BN,eAAeO,QAAQZ,GAE1D,GAAoB,OAAhBW,EACA,OAAOD,aAAoBN,SAAWM,IAAaA,QAAAA,EAAY,KAGnE,IACI,MAAMR,EAA2BK,KAAKM,MAAMF,GAE5C,OAAgB,UAATT,EAAKC,YAAI,IAAAW,EAAAA,EAAIZ,EACtB,MAAOa,GACL,OAAOJ,GAYf,eAAOK,CAAShB,EAAaiB,GACzB,MAAMf,EAAsBJ,EAAeW,IAAIT,GAM/C,OAJa,OAATE,GACAJ,EAAeC,IAAIC,EAAKiB,GAGrBf,QAAAA,EAAQJ,EAAeW,IAAIT,GAQtC,UAAOkB,GACH,MAAMC,EAAOC,OAAAC,OAAA,CAAA,EAAsBhB,gBAEnC,IAAK,MAAMH,KAAQiB,EACfA,EAAQjB,GAAQJ,EAAeW,IAAIP,GAGvC,OAAOiB,EAQX,aAAOG,CAAOtB,GACVK,eAAekB,WAAWvB,GAM9B,YAAOwB,GACHnB,eAAemB,QAUnB,UAAOC,CAAIzB,GACP,QAASF,EAAeW,IAAIT,GAUhC,aAAO0B,CAAOC,GAGV,OAFAA,EAAOA,aAAgBC,MAAQD,EAAO,IAAIE,YAE9BC,OAAQ9B,GAAgBF,EAAe2B,IAAIzB,IAAM+B,OAAS,EAQ1E,cAAOC,GACH,OAAoD,IAA7CZ,OAAOO,KAAK7B,EAAeoB,OAAOa,OAQ7C,iBAAOE,GACH,OAAQnC,EAAekC,UAQ3B,WAAOL,GACH,OAAOP,OAAOO,KAAKtB,gBAQvB,YAAO6B,GACH,OAAO7B,eAAe0B,OAQ1B,WAAOI,CAAKnC,GACRoC,QAAQC,IAAIvC,EAAeW,IAAIT,KAIjB,oBAAXsC,SACNA,OAAexC,eAAiBA,GAGf,oBAAXyC,SACNA,OAAezC,eAAiBA"}