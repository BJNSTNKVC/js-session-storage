{"version":3,"file":"main.umd.js","sources":["../src/main.ts"],"sourcesContent":["type SessionStorageItem = {\n    data: any,\n};\n\nexport class SessionStorage {\n    static set(key: string, value: any): void {\n        const item: SessionStorageItem = {\n            data  : value instanceof Function ? value() : value,\n        };\n\n        sessionStorage.setItem(key, JSON.stringify(item));\n    }\n\n    /**\n     * Get the key from the Storage object.\n     *\n     * @param { string } key String containing the name of the key you want to create.\n     * @param { string | Function | null } fallback String containing the fallback value.\n     *\n     * @return { * }\n     */\n    static get(key: string, fallback: string | Function | null = null): any {\n        const storageItem: string | null = sessionStorage.getItem(key);\n\n        if (storageItem === null) {\n            return fallback instanceof Function ? fallback() : fallback ?? null;\n        }\n\n        try {\n            const item: SessionStorageItem = JSON.parse(storageItem);\n\n            return item.data ?? item;\n        } catch (error) {\n            return storageItem;\n        }\n    }\n\n    /**\n     * Get the key from the Storage, or execute the given callback and store the result.\n     *\n     * @param { string } key String containing the name of the key you want to create.\n     * @param { Function } callback Function you want to execute.\n     *\n     * @return { any }\n     */\n    static remember(key: string, callback: Function): any {\n        const item: string | null = SessionStorage.get(key);\n\n        if (item === null) {\n            SessionStorage.set(key, callback);\n        }\n\n        return item ?? SessionStorage.get(key);\n    }\n\n    /**\n     * Retrieves all items from the Storage object.\n     *\n     * @return { object }\n     */\n    static all(): object {\n        const storage: object | any = { ...sessionStorage };\n\n        for (const item in storage) {\n            storage[item] = SessionStorage.get(item);\n        }\n\n        return storage;\n    }\n\n    /**\n     * Remove the key from the Storage object.\n     *\n     * @param { string } key String containing the name of the key you want to delete.\n     */\n    static remove(key: string): void {\n        sessionStorage.removeItem(key);\n    }\n\n    /**\n     * Clear all keys stored in a given Storage object.\n     */\n    static clear(): void {\n        sessionStorage.clear();\n    }\n\n    /**\n     * Determine if the key exists in the Storage object.\n     *\n     * @param { string } key String containing the name of the key you want to check against\n     *\n     * @return { boolean }\n     */\n    static has(key: string): boolean {\n        return !!SessionStorage.get(key);\n    }\n\n    /**\n     * Determine if any of the keys exists in the Storage object.\n     *\n     * @param { string | array } keys String containing the name of the key you want to check against\n     *\n     * @return { boolean }\n     */\n    static hasAny(keys: string | string[]): boolean {\n        keys = keys instanceof Array ? keys : [...arguments];\n\n        return keys.filter((key: string) => SessionStorage.has(key)).length > 0;\n    }\n\n    /**\n     * Determine if the Storage object is empty.\n     *\n     * @return { boolean }\n     */\n    static isEmpty(): boolean {\n        return Object.keys(SessionStorage.all()).length === 0;\n    }\n\n    /**\n     * Determine if the Storage object is not empty.\n     *\n     * @return { boolean }\n     */\n    static isNotEmpty(): boolean {\n        return !SessionStorage.isEmpty();\n    }\n\n    /**\n     * Retrieves all keys from the Storage object.\n     *\n     * @return { array }\n     */\n    static keys(): string[] {\n        return Object.keys(sessionStorage);\n    }\n\n    /**\n     * Returns the total number of items in the Storage object.\n     *\n     * @return { number }\n     */\n    static count(): number {\n        return sessionStorage.length;\n    }\n\n    /**\n     * Dump the key from the Storage object.\n     *\n     * @param { string } key String containing the name of the key you want to dump.\n     */\n    static dump(key: string): void {\n        console.log(SessionStorage.get(key));\n    }\n}\n\nif (typeof window !== 'undefined') {\n    (window as any).SessionStorage = SessionStorage;\n}\n\nif (typeof global !== 'undefined') {\n    (global as any).SessionStorage = SessionStorage;\n}"],"names":[],"mappings":"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"}