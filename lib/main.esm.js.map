{"version":3,"file":"main.esm.js","sources":["../src/main.ts"],"sourcesContent":["export type SessionStorageItem = {\n    data: any,\n};\n\nexport class SessionStorage {\n    /**\n     * Set the key to the Storage object.\n     *\n     * @param { string } key String containing the name of the key you want to create.\n     * @param { * } value String containing the value of the key you want to create.\n     */\n    static set(key: string, value: any): void {\n        const item: SessionStorageItem = {\n            data: value instanceof Function ? value() : value,\n        };\n\n        sessionStorage.setItem(key, JSON.stringify(item));\n    }\n\n    /**\n     * Get the key from the Storage object.\n     *\n     * @param { string } key String containing the name of the key you want to create.\n     * @param { string | Function | null } fallback String containing the fallback value.\n     *\n     * @return { * }\n     */\n    static get(key: string, fallback: string | Function | null = null): any {\n        const storageItem: string | null = sessionStorage.getItem(key);\n\n        if (storageItem === null) {\n            return fallback instanceof Function ? fallback() : fallback ?? null;\n        }\n\n        try {\n            const item: SessionStorageItem = JSON.parse(storageItem);\n\n            return item.data ?? item;\n        } catch {\n            return storageItem;\n        }\n    }\n\n    /**\n     * Get the key from the Storage, or execute the given callback and store the result.\n     *\n     * @param { string } key String containing the name of the key you want to create.\n     * @param { Function } callback Function you want to execute.\n     *\n     * @return { any }\n     */\n    static remember(key: string, callback: Function): any {\n        const item: string | null = this.get(key);\n\n        if (item === null) {\n            this.set(key, callback);\n        }\n\n        return item ?? this.get(key);\n    }\n\n    /**\n     * Retrieves all items from the Storage object.\n     *\n     * @return { object }\n     */\n    static all(): Record<string, any> {\n        return Object.fromEntries(Object.keys(sessionStorage).map((key: string): [string, any] => [key, this.get(key)]));\n    }\n\n    /**\n     * Remove the key from the Storage object.\n     *\n     * @param { string } key String containing the name of the key you want to delete.\n     */\n    static remove(key: string): void {\n        sessionStorage.removeItem(key);\n    }\n\n    /**\n     * Clear all keys stored in a given Storage object.\n     */\n    static clear(): void {\n        sessionStorage.clear();\n    }\n\n    /**\n     * Determine if the key exists in the Storage object.\n     *\n     * @param { string } key String containing the name of the key you want to check against\n     *\n     * @return { boolean }\n     */\n    static has(key: string): boolean {\n        return !!this.get(key);\n    }\n\n    /**\n     * Determine if any of the keys exists in the Storage object.\n     *\n     * @param { string | array } keys String containing the name of the key you want to check against\n     *\n     * @return { boolean }\n     */\n    static hasAny(...keys: [string | string[]] | string[]): boolean {\n        if (keys.length === 1) {\n            if (Array.isArray(keys[0])) {\n                keys = keys[0];\n            } else {\n                keys = [keys[0]];\n            }\n        }\n\n        return keys.some((key: string): boolean => this.has(key));\n    }\n\n    /**\n     * Determine if the Storage object is empty.\n     *\n     * @return { boolean }\n     */\n    static isEmpty(): boolean {\n        return Object.keys(this.all()).length === 0;\n    }\n\n    /**\n     * Determine if the Storage object is not empty.\n     *\n     * @return { boolean }\n     */\n    static isNotEmpty(): boolean {\n        return !this.isEmpty();\n    }\n\n    /**\n     * Retrieves all keys from the Storage object.\n     *\n     * @return { array }\n     */\n    static keys(): string[] {\n        return Object.keys(sessionStorage);\n    }\n\n    /**\n     * Returns the total number of items in the Storage object.\n     *\n     * @return { number }\n     */\n    static count(): number {\n        return sessionStorage.length;\n    }\n\n    /**\n     * Dump the key from the Storage object.\n     *\n     * @param { string } key String containing the name of the key you want to dump.\n     */\n    static dump(key: string): void {\n        console.log(this.get(key));\n    }\n}\n\nif (typeof window !== 'undefined') {\n    (window as any).SessionStorage = SessionStorage;\n}\n\nif (typeof global !== 'undefined') {\n    (global as any).SessionStorage = SessionStorage;\n}"],"names":[],"mappings":"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"}